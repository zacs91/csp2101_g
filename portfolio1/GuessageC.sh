#!/bin/bash
#Student Name: Zac Smith | Student Number: 10459495
# Declare the num to be type interger starting at 0
declare -i num=0

# This defines numb1 as to be int only when input by the user. The caret ^ means start of the line and a range of 0-9, if these
# ranges were not input an error is displayed
numb1='^[0-9]+$'

# define random number generator between 20&70. -i is input range to shuffle and -n number of lines to output to
acnum=$(shuf -i20-70 -n1 )

# define data.txt as FILE variable & test if data.txt has been created before if so do nothing, if not then it will create
# a new data.txt file to save scores
FILE=data.txt
[[ -f data.txt ]] && : || >data.txt

# Simple Title to the game with added colours and tabbed to the centre of the console on new line.
echo -e "\e[92m\t************* WELCOME TO THE AGE GUESSING GAME *************\n"

# read user input and assign it to the variable 'name' to be used further in the game
read -p "Please enter your name: " name

# display the users name in a simple set of instructions for the game. 0m colours back to normal
echo -e "\e[0mThe goal $name is to try guess the age between 20 & 70\n"

# While loop to iterate over and over until the 'guess' from user input equals 'acnum' generated by the random number generatror
while (( guess != acnum )); do

			# each time the 'guess' is not equal to 'acnum', the num increases by 1 to tally the total of guesses at the end of the game
			num=num+1
			read -p "Enter guess $num: " guess # assign user input to 'guess' variable

# using the predefined variable created outside the loop 'numb1'. If user does not enter an interger
# then it will print below message '! notequal operator'
# =~ is a regex matching operator, to test the left to the right variables
	if ! [[ "$guess" =~ $numb1 ]]; then
        echo "Please enter whole numbers only! (0-9)"

		 # if acnum is greater than guess, print this tip to the user screen. loop starts over again.
	elif (( guess < acnum )); then
				echo "Your guess is too low, try again!"

		 # if acnum is less than guess, print this tip to the user screen. loop starts over again
	elif (( guess > acnum )); then
				echo "Your guess is too high, try again!"

fi 	 # end of the if statements, will continue from the top

done # once the game is finished this will cease the while loop and continue below

# Use the 'name' to tell the user how many guesses it took from 'num' variable and Congratulate them on winning
echo -e "Congratulations $name, you guessed correctly in $num guesses.\n"

# tabbed title to centre of the console and on a new line
echo -e "\t\tTop 3 Players:\n"

# append game details to data.txt. using 'num' & 'name' to record. tee -a means append to the end of FILE
 # >/dev/null will not display the result to the screen as is it will be done below
echo "Guesses= $num  Player= $name" | tee -a data.txt >/dev/null

# display top 3 players with lowest guesses first. k2 means select data after second white space to sort.
# -n means to sort numerically & head -3 means to sort only the top 3 from the list only using the numbers
sort -k2 -n data.txt | head -3
